// Generated by CoffeeScript 2.5.1
// Denna fil kan kastas
var Button, Transformer, button, col, draw, grid, mouseClicked, mouseMoved, setup, tx;

Transformer = class Transformer {
  constructor(x2 = 0, y2 = 0, a1 = 0, s = 1, stack = []) {
    this.x = x2;
    this.y = y2;
    this.a = a1;
    this.s = s;
    this.stack = stack;
    this.commands = [];
  }

  push() {
    push();
    return this.stack.push([this.x, this.y, this.a, this.s]);
  }

  pop() {
    pop();
    return [this.x, this.y, this.a, this.s] = this.stack.pop();
  }

  rotate(da) {
    this.commands.push(`r ${da}`);
    rotate(da);
    return this.a += da;
  }

  scale(ds) {
    this.commands.push(`s ${ds}`);
    scale(ds);
    return this.s *= ds;
  }

  translate(dx, dy) {
    this.commands.push(`t ${dx} ${dy}`);
    translate(dx, dy);
    this.x += this.s * dx * cos(this.a) - this.s * dy * sin(this.a);
    return this.y += this.s * dy * cos(this.a) + this.s * dx * sin(this.a);
  }

  getCommands() {
    return _.clone(this.commands);
  }

  backwards(x, y, commands) {
    var a, arr, command, dx, dy, k, len, ref, x1, y1;
    ref = commands.reverse();
    for (k = 0, len = ref.length; k < len; k++) {
      command = ref[k];
      arr = command.split(' ');
      if (arr[0] === 'r') {
        a = -arr[1];
        x1 = x * cos(a) - y * sin(a);
        y1 = y * cos(a) + x * sin(a);
        [x, y] = [x1, y1];
      }
      if (command[0] === 's') {
        x = x / arr[1];
        y = y / arr[1];
      }
      if (command[0] === 't') {
        dx = arr[1];
        dy = arr[2];
        x -= dx;
        y -= dy;
      }
    }
    return [x, y];
  }

  dump() {
    return console.log(this.x, this.y, this.a, this.s);
  }

};

button = tx = new Transformer();

col = 'black';

Button = class Button {
  constructor(x2, y2, w, h) {
    this.x = x2;
    this.y = y2;
    this.w = w;
    this.h = h;
  }

  draw() {
    fill(col);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    return (this.x - this.w / 2 <= x && x <= this.x + this.w / 2) && (this.y - this.h / 2 <= y && y <= this.y + this.h / 2);
  }

};

setup = function() {
  createCanvas(400, 300);
  rectMode(CENTER);
  angleMode(DEGREES);
  button = new Button(0, 0, 20, 40);
  console.log('ok');
  return tx.dump();
};

grid = function() {
  var i, j, k, l, len, len1, ref, ref1, results;
  ref = range(0, width, 10);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(i, 0, i, height);
  }
  ref1 = range(0, height, 10);
  results = [];
  for (l = 0, len1 = ref1.length; l < len1; l++) {
    j = ref1[l];
    results.push(line(0, j, width, j));
  }
  return results;
};

draw = function() {
  tx = new Transformer();
  tx.push();
  background('gray');
  grid();
  tx.translate(100, 50);
  tx.translate(20, 20);
  tx.rotate(90);
  //tx.scale 2
  button.commands = tx.getCommands();
  button.draw();
  return tx.pop();
};

mouseMoved = function() {
  var x, y;
  [x, y] = tx.backwards(mouseX, mouseY, button.commands);
  return col = button.inside(x, y) ? 'red' : 'white';
};

mouseClicked = function() {
  return console.log(button.commands, tx.backwards(mouseX, mouseY, button.commands));
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Transformer\coffee\sketch.coffee