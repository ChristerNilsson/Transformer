// Generated by CoffeeScript 2.5.1
var Button, buttons, draw, getLocalCoords, mouseClicked, mouseMoved, pd, ph, pimage, prect, ptext, ptextSize, ptranslate, pw, setup;

buttons = {};

// Löser problemet! Transformeringar behöver inte skötas!
// Alternativ som fungerar lika bra, men kräver mer kod.
// https://www.reddit.com/r/p5js/comments/jo7ucf/clicking_on_a_translated_scaled_and_rotated_shape/
getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

// procentuella versioner:
pw = function(x) {
  return x / 100 * height;
};

ph = function(y) {
  return y / 100 * width;
};

pd = function(s) {
  return s / 100 * sqrt(width * width + height * height);
};

pimage = function(img, x, y, w, h) {
  return image(img, pw(x), ph(y), pw(w), ph(h));
};

prect = function(x, y, w, h) {
  return rect(pw(x), ph(y), pw(w), ph(h));
};

ptext = function(t, x, y) {
  return text(t, pw(x), ph(y));
};

ptextSize = function(s) {
  return textSize(pd(s));
};

ptranslate = function(x, y) {
  return translate(pw(x), ph(y));
};

setup = function() {
  var canvas, h, q, w;
  canvas = createCanvas(300, 200);
  rectMode(CENTER);
  angleMode(DEGREES);
  textAlign(CENTER, CENTER);
  w = width;
  h = height;
  q = h / 10; // höjden på knapparna i mitten
  buttons.left = new Button('left', 0, q - h / 2, h, (w - q) / 2, 'white');
  buttons.pause = new Button('pause', -h / 4, 0, h / 2, q, 'white');
  buttons.edit = new Button('edit', h / 4, 0, h / 2, q, 'white');
  buttons.right = new Button('right', 0, h / 2 - q, h, (w - q) / 2, 'white');
  return buttons.left.inverted = true;
};

draw = function() {
  background('black');
  rotate(90);
  translate(height / 2, -width / 2);
  buttons.pause.draw();
  buttons.edit.draw();
  buttons.right.draw();
  return buttons.left.draw();
};

mouseClicked = function() {
  var button, key, results, x, y;
  ({x, y} = getLocalCoords());
  console.log(x, y);
  results = [];
  for (key in buttons) {
    button = buttons[key];
    if (button.inside(x, y)) {
      results.push(console.log('Clicked', key, x, y));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

Button = class Button {
  constructor(text1, x1, y1, w1, h1, bg) {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg;
    this.inverted = false;
  }

  draw() {
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    fill('black');
    if (this.inverted) {
      push();
      translate(this.x, this.y); // tillbaka till origo
      rotate(180); // vänd
      translate(-this.x, -this.y); // tillbaka till x,y
      text(this.text, this.x, this.y);
      return pop();
    } else {
      return text(this.text, this.x, this.y);
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

mouseMoved = function() {
  var button, key, results, x, y;
  ({x, y} = getLocalCoords());
  results = [];
  for (key in buttons) {
    button = buttons[key];
    results.push(button.bg = button.inside(x, y) ? 'red' : 'white');
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Transformer\coffee\MouseTransform.coffee