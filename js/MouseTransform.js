// Generated by CoffeeScript 2.5.1
var Button, MouseParameters, MouseTransformed, buttons, canvas, draw, mouseClicked, mouseMoved, mtx, setup;

canvas = null;

mtx = null;

buttons = [];

MouseTransformed = class MouseTransformed {
  constructor() {
    this.mouseStack = [];
    this.mouseStack.push(new MouseParameters());
    this.resetMouse();
  }

  pushMatrix() {
    var last;
    push();
    last = _.last(this.mouseStack);
    return this.mouseStack.push(new MouseParameters(last.x, last.y, last.R, last.S));
  }

  popMatrix() {
    if (_.size(this.mouseStack) > 1) {
      pop();
      return this.mouseStack.pop();
    }
  }

  
    // Translate current animation and mouse matrices.
  translate(dx, dy) {
    var R, S, last;
    translate(dx, dy);
    last = _.last(this.mouseStack);
    R = last.R;
    S = last.S;
    last.x += cos(R) * S * dx - sin(R) * S * dy;
    return last.y += cos(R) * S * dy + sin(R) * S * dx;
  }

  scale(x) {
    var last;
    scale(x);
    last = _.last(this.mouseStack);
    return last.S *= x;
  }

  rotate(angle) {
    rotate(angle);
    return _.last(this.mouseStack).R += angle;
  }

  resetMouse() {
    return _.last(this.mouseStack).reset();
  }

  mouseX(x, y) {
    var R, S, last;
    last = _.last(this.mouseStack);
    R = last.R;
    S = last.S;
    return cos(R) / S * (x - last.x) + sin(R) / S * (y - last.y);
  }

  mouseY(x, y) {
    var R, S, last;
    last = _.last(this.mouseStack);
    R = last.R;
    S = last.S;
    return cos(R) / S * (y - last.y) - sin(R) / S * (x - last.x);
  }

};

MouseParameters = class MouseParameters {
  constructor(ix = 0, iy = 0, iR = 0, iS = 1) {
    this.ix = ix;
    this.iy = iy;
    this.iR = iR;
    this.iS = iS;
    this.reset();
  }

  reset() {
    this.x = this.ix;
    this.y = this.iy;
    this.R = this.iR;
    return this.S = this.iS;
  }

};

//##############################################
setup = function() {
  canvas = createCanvas(400, 400);
  rectMode(CENTER);
  angleMode(DEGREES);
  buttons.push(new Button(0, 0, 100, 100, 'white'));
  return buttons.push(new Button(100, 100, 50, 50, 'white'));
};

draw = function() {
  var button, i, len, results;
  mtx = new MouseTransformed();
  background('black');
  mtx.pushMatrix();
  mtx.translate(200, 200);
  mtx.rotate(45);
  mtx.translate(-20, -20);
  mtx.scale(2);
  mtx.translate(-20, -20);
  mtx.rotate(5);
  results = [];
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    results.push(button.draw());
  }
  return results;
};

//mtx.popMatrix() # KNAS! Musen fungerar inte lÃ¤ngre
mouseClicked = function() {
  var button, i, len, results;
  results = [];
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    if (button.inside()) {
      results.push(console.log('Clicked'));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

Button = class Button {
  constructor(x1, y1, w, h, bg) {
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.bg = bg;
  }

  draw() {
    fill(this.bg);
    return rect(this.x, this.y, this.w, this.h);
  }

  inside(x, y) {
    //x = mtx.mouseX mouseX,mouseY
    //y = mtx.mouseY mouseX,mouseY
    return (this.x - this.w / 2 <= x && x <= this.x + this.w / 2) && (this.y - this.h / 2 <= y && y <= this.y + this.h / 2);
  }

};

mouseMoved = function() {
  var button, i, len, localCoord, matrix, results;
  matrix = drawingContext.getTransform();
  localCoord = matrix.inverse().transformPoint(new DOMPoint(mouseX * pixelDensity(), mouseY * pixelDensity()));
  results = [];
  for (i = 0, len = buttons.length; i < len; i++) {
    button = buttons[i];
    results.push(button.bg = button.inside(localCoord.x, localCoord.y) ? 'red' : 'white');
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Transformer\coffee\MouseTransform.coffee