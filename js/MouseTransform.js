// Generated by CoffeeScript 2.5.1
var Button, SCALEX, SCALEY, buttons, draw, getLocalCoords, mouseClicked, mouseMoved, setup, windowResized;

buttons = {};

SCALEX = 1;

SCALEY = 1;

// Löser problemet! Transformeringar behöver inte skötas!
// Alternativ som fungerar lika bra, men kräver mer kod.
// https://www.reddit.com/r/p5js/comments/jo7ucf/clicking_on_a_translated_scaled_and_rotated_shape/
getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

Button = class Button {
  constructor(text1, x1, y1, w, h, bg) {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w;
    this.h = h;
    this.bg = bg;
    this.inverted = false;
  }

  draw() {
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    fill('black');
    if (this.inverted) {
      push();
      translate(this.x, this.y); // tillbaka till origo
      rotate(180); // vänd
      translate(-this.x, -this.y); // tillbaka till x,y
      text(this.text, this.x, this.y);
      return pop();
    } else {
      return text(this.text, this.x, this.y);
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

windowResized = function() {
  var diag;
  resizeCanvas(innerWidth, innerHeight);
  SCALEY = width / 100;
  SCALEX = height / 100;
  diag = sqrt(width * width + height * height);
  return console.log('resized', width, height, SCALEX, SCALEY);
};

setup = function() {
  createCanvas(100, 100); // innerWidth,innerHeight
  SCALEY = width / 100;
  SCALEX = height / 100;
  console.log('setup', width, height, SCALEX, SCALEY);
  rectMode(CENTER);
  angleMode(DEGREES);
  textAlign(CENTER, CENTER);
  // rectMode CENTER
  buttons.left = new Button('left', 50, 22, 100, 44, 'white');
  buttons.pause = new Button('pause', 25, 50, 50, 12, 'white');
  buttons.edit = new Button('edit', 75, 50, 50, 12, 'white');
  buttons.right = new Button('right', 50, 78, 100, 44, 'white');
  return buttons.left.inverted = true;
};

draw = function() {
  background('black');
  translate(-50, -50); // tillbaka till origo
  rotate(90); // vänd
  translate(50, -(50 + width)); // tillbaka till x,y
  scale(SCALEX, SCALEY);
  strokeWeight(1 / SCALEX);
  buttons.pause.draw();
  buttons.edit.draw();
  buttons.right.draw();
  return buttons.left.draw();
};

mouseClicked = function() {
  var button, key, results, x, y;
  ({x, y} = getLocalCoords());
  console.log(x, y);
  results = [];
  for (key in buttons) {
    button = buttons[key];
    if (button.inside(x, y)) {
      results.push(console.log('Clicked', key, x, y));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

mouseMoved = function() {
  var button, key, results, x, y;
  ({x, y} = getLocalCoords());
  results = [];
  for (key in buttons) {
    button = buttons[key];
    results.push(button.bg = button.inside(x, y) ? 'red' : 'white');
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\Transformer\coffee\MouseTransform.coffee